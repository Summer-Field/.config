# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet cla "Class" b
class ${1} {
private:

public:
	// constructors
	${1}();
	${1}(const ${1} &);
	~${1}();
	// overload operator methods
	${1} & operator=(const ${1}&);
	// overload operator friends
	friend bool operator==(const ${1} &st, const ${1} &st2);
	friend ostream & operator<<(ostream & os, const ${1} & st);
	friend istream & operator>>(istream & is, ${1} & st);
};
endsnippet

snippet cm "Comment Section" A
/* ${1} */
endsnippet

snippet do "Do Loop"
do(${1}) {
	${3}
} while(${2});
endsnippet

snippet while "While Loop"
while(${1}){
	${2}
};
endsnippet

snippet printf "Format Print" A
printf("${1}");
endsnippet

snippet main "Main Function"
/* Header File */
#include <stdio.h>
#include <stdlib.h>

/* Entry Point */
int main(int argc, char** argv){
	printf("hello world!\n");

	return 0;
}

/* Implementation */

endsnippet

snippet ifndef "Header File"
#ifndef ${1}
#define ${1}

/* Header File */
#include <stdlib.h>

/* Marcro */
#define ${2}

/* Entity */
typedef struct ${3} {
} ${4};

/* Function Prototype */

#endif
endsnippet
